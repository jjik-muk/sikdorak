name: BE - ECS 배포

on:
  push:
    branches: [dev]
    paths:
      [
        "be/src/**",
        "be/build.gradle",
        "be/config",
        "be/config-static-analyzer/**",
      ]

permissions:
  contents: read

jobs:
  be-build-test:
    name: Test & Deploy SpringBoot
    runs-on: ubuntu-20.04
    environment: ProdServer
    defaults:
      run:
        working-directory: ./be

    steps:
      - name: setup repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.SUBMODULES_ACCESS_TOKEN }}
          submodules: recursive

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          
      - name: setup java 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle
      - name: Use gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Spring Boot Build with Gradle
        run: ./gradlew build

      - name: Deploy Spring Boot image into ECR
        env:
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL}}
        run: |
          ./gradlew jib -Pprod

      - name: Download task definition
        #id: task-def
        run: |
          aws ecs describe-task-definition --task-definition web --query taskDefinition > task-definition.json
          
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          #task-definition: ${{ steps.task-def.outputs.task-definition }}
          task-definition: task-definition.json
          service: web-ser2
          cluster: ECS-springboot
          wait-for-service-stability: true

  #server-health-check:
  #  needs: be-build-test
  #  runs-on: ubuntu-20.04

  #  steps:
  #    - name: Check the deployed service URL
  #      uses: jtalk/url-health-check-action@v2
  #      with:
  #        url: https://sikdorak-test.herokuapp.com/docs/index.html|http://sikdorak-test.herokuapp.com/docs/index.html
  #        follow-redirect: false
  #        max-attempts: 3
  #        retry-delay: 10s
  #        retry-all: false

      - name: Noti Discord - Test Success
        uses: rjstone/discord-webhook-notify@v1
        if: success()
        with:
          severity: info
          details: Test Succeeded!
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
      - name: Noti Discord - Test Failure
        uses: rjstone/discord-webhook-notify@v1
        if: failure()
        with:
          severity: error
          details: Test Failed!
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
      - name: Noti Discord - Test Cancelled
        uses: rjstone/discord-webhook-notify@v1
        if: cancelled()
        with:
          severity: warn
          details: Test Cancelled!
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
